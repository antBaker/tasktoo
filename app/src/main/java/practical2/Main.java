/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package practical2;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.w3c.dom.*;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.*;

public class Main {

    // Class representing the fields we want to extract from each record in the XML.
    static class Record {
        String name;
        String postalZip;
        String region;
        String country;
        String address;
        List<Integer> list;

        public Record(String name, String postalZip, String region, String country, String address, List<Integer> list) {
            this.name = name;
            this.postalZip = postalZip;
            this.region = region;
            this.country = country;
            this.address = address;
            this.list = list;
        }
    }

    public static void main(String[] args) {
        try {
            // Parse XML file and get all records from the file (validates file presence).
            List<Record> records = parseXML("data.xml");
            if (records.isEmpty()) {
                System.err.println("No records found in the XML file.");
                return;
            }

            // Process the provided arguments into a set of selected field names (in lowercase for case-insensitive matching)
            Set<String> selectedFields = new HashSet<>();
            if (args.length == 0) {
                System.out.println("Please provide fields to display (e.g., name,region,list)");
                return;
            } else {
                // Split each argument on comma and add each trimmed token.
                for (String arg : args) {
                    String[] tokens = arg.split(",");
                    for (String token : tokens) {
                        if (!token.trim().isEmpty()) {
                            selectedFields.add(token.trim().toLowerCase());
                        }
                    }
                }
            }

            if (selectedFields.isEmpty()) {
                System.err.println("No valid fields were provided. Please try again.");
                return;
            }

            // Prepare a list of maps to hold the selected fields for each record.
            List<Map<String, Object>> jsonRecords = new ArrayList<>();

            // For each record, try to collect the selected fields gracefully.
            for (Record record : records) {
                Map<String, Object> selectedValues = new LinkedHashMap<>();

                if (selectedFields.contains("name")) {
                    selectedValues.put("name", safeValue(record.name));
                }
                if (selectedFields.contains("postalzip")) {
                    selectedValues.put("postalZip", safeValue(record.postalZip));
                }
                if (selectedFields.contains("region")) {
                    selectedValues.put("region", safeValue(record.region));
                }
                if (selectedFields.contains("country")) {
                    selectedValues.put("country", safeValue(record.country));
                }
                if (selectedFields.contains("address")) {
                    selectedValues.put("address", safeValue(record.address));
                }
                if (selectedFields.contains("list")) {
                    selectedValues.put("list", record.list != null ? record.list : Collections.emptyList());
                }

                // Only add the record if at least one field was successfully added.
                if (!selectedValues.isEmpty()) {
                    jsonRecords.add(selectedValues);
                }
            }

            // Convert the list of selected field maps into JSON format using Jackson.
            ObjectMapper objectMapper = new ObjectMapper();
            String jsonResult = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonRecords);

            // Print the final JSON result.
            System.out.println(jsonResult);
        } catch (Exception e) {
            System.err.println("An error occurred while processing the XML or arguments:");
            e.printStackTrace();
        }
    }

    /**
     * Returns the original string or a default message if null.
     */
    private static String safeValue(String value) {
        return value != null ? value : "N/A";
    }

    // Method to parse the XML file and extract all <record> elements into a List of Record objects.
    private static List<Record> parseXML(String resourceName) throws Exception {
        InputStream input = Main.class.getClassLoader().getResourceAsStream(resourceName);
        if (input == null) {
            throw new Exception("Resource not found: " + resourceName);
        }

        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();

        // Use an InputSource with the specified encoding.
        InputSource is = new InputSource(new InputStreamReader(input, StandardCharsets.UTF_8));
        is.setEncoding("UTF-8");

        Document doc = dBuilder.parse(is);
        doc.getDocumentElement().normalize();

        NodeList nodeList = doc.getElementsByTagName("record");
        List<Record> records = new ArrayList<>();

        for (int i = 0; i < nodeList.getLength(); i++) {
            Node node = nodeList.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                Element element = (Element) node;

                String name = getTextContent(element, "name");
                String postalZip = getTextContent(element, "postalZip");
                String region = getTextContent(element, "region");
                String country = getTextContent(element, "country");
                String address = getTextContent(element, "address");
                String listString = getTextContent(element, "list");

                List<Integer> list = new ArrayList<>();
                if (listString != null && !listString.isEmpty()) {
                    String[] listItems = listString.split(",");
                    for (String item : listItems) {
                        try {
                            if (!item.trim().isEmpty()) {
                                list.add(Integer.parseInt(item.trim()));
                            }
                        } catch (NumberFormatException nfe) {
                            System.err.println("Warning: Unable to parse number from '" + item.trim() + "'. Skipping.");
                        }
                    }
                }

                records.add(new Record(name, postalZip, region, country, address, list));
            }
        }
        return records;
    }

    /**
     * Safely retrieves text content for a given tag from the element.
     * Returns an empty string if the tag is not found.
     */
    private static String getTextContent(Element element, String tagName) {
        NodeList nodes = element.getElementsByTagName(tagName);
        if (nodes.getLength() > 0 && nodes.item(0) != null && nodes.item(0).getTextContent() != null) {
            return nodes.item(0).getTextContent().trim();
        }
        return "";
    }
}
